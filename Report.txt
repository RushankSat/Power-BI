
Hello I am Rushank Satardekar and I have started 1 month Power BI DAX learn task.

25-11-2023
Yesterday I had Interview for Addend Analytics and they have asked me to learn Power BI with DAX language.

They have also given me Resource to learn Power BI from its a Youtube channel name "Crubal" and I have started a Playlist name "DAX Friday".

#1 Its about writing a simple DAX measure in Power BI.
    Measure In Power BI, measures are used to perform calculations on your data and display the results in your reports and dashboards.
    Measures are created using the DAX (Data Analysis Expressions) language.

    eg. Measure = CALCULATE(COUNTA(DimGeo[City ID]),
                              DimGeo[Country])="Sweden"
                              )
    COUNTA is used because City ID datatype was not  integer.


27-11-2023

Today I have started with DAX functions with Northwind Dataset
#2 Calander() and Calanderauto()

    Calenderauto is function which generate a column with continuous dates from Dataset.
    Its Returns a table with a single column named "Date" that contains a contiguous set of dates.
    The range of dates is calculated automatically based on data in the model.

    eg. dates = CALANDERAUTO()

    Calander is function with Expressions in it start date and end date.
    Its Returns a table with a single column named "Date" containing a contiguous set of dates.
    The range of dates is from the specified start date to the specified end date, inclusive of those two dates.

    eg. dates = CALENDAR(DATE(2014,01,01),DATE(2014,12,31))

    We can make a table with many columns like weekdays,yearQty...etc.

    eg. DimDate = ADDCOLUMNS(CALENDAR(
        DATE(YEAR(MIN(Orders[OrderDate])), 1, 1),
        DATE(YEAR(MAX(Orders[OrderDate])), 12, 1)), "DateAsInteger", FORMAT ( [Date], "YYYYMMDD" ), "Year", YEAR ( [Date] ), "MonthNo", FORMAT ( [Date], "MM" ), "YearMonthNo", FORMAT ( [Date], "YYYY/MM" ), "YearMonth", FORMAT ( [Date], "YYYY/mmm" ), "MonthShort", FORMAT ( [Date], "mmm" ), "MonthLong", FORMAT ( [Date], "mmmm" ), "WeekNo", WEEKDAY ( [Date] ), "WeekDay", FORMAT ( [Date], "dddd" ), "WeekDayShort", FORMAT ( [Date], "dddd" ), "Quarter", "Q" & FORMAT ( [Date], "Q" ), "YearQuarter", FORMAT ( [Date], "YYYY" ) & "/Q" & FORMAT ( [Date],"Q" )
)

    This function can be very useful for  time-related analysis and reporting.
  #3 Sum() and Sumx()

    Sum() is function which is use to calculate total value of column.
    Its Adds all the numbers in a column.

    Syntax:- SUM(Column Name)

    eg. Total Sales = SUM(Order_Details[TotSalesColumn])

    SUMX() is function which is use to calculate each row in a table.
    Its returns the sum of an expression evaluated for each row in a table.

    Syntax:- SUMX(Table,Expression)

    eg. Total Sales X = SUMX(Order_Details,Order_Details[UnitPrice]*(1-Order_Details[Discount])*Order_Details[Quantity])

    Difference Between SUM and SUMX is that sum is Vertical count function while SUMX is Horizontal count function.
    eg. Addition of one column is done by SUM while Addition with other expression of each row in table is SUMX.

  #4 Calculated Column and Measures
  Calculated column are columns which get added to table with an operation with data.

  Calculated Column is stored with table its the new column is table.
  Measures does not consume memory and perform operation which can be use dynamically.


  In real life scenario calculated column can be created if we want another column from it.
  eg. Want to categories a sales discount5% calculated column  into high discount or low discount.


  28-11-2023

  Today I am #4 video of DAX friday series with functions

  #1 *COUNT() is function to calculate number of rows
     Its Counts the number of rows in the specified column that contain non-blank values.

     Syntx:- COUNT(Columnname)

     eg. COUNT = COUNT(Table1[ProductID])

     *COUNTA() is function to calculate number of rows but with both numerical and text values.
     Its Counts the number of rows in the specified column that contain non-blank values.

     Syntax:- COUNTA(columnname)

     eg. COUNTA = COUNTA(Table1[ProductName])

     note:- if we COUNTA a blank column it would result in "(Blanks)".
            Date is consider numerical in Power BI and excel.

     *COUNTX is function which calculate values from table.
     Its Counts the number of rows that contain a non-blank value or an expression that evaluates to a non-blank value,
     when evaluating an expression over a table.

     Syntax:- COUNTX(Table,Expressions)

     eg. COUNTX: = COUNTX(FILTER(Table1,[StockQty]>100),Table1[ProductID])

     *COUNTAX
     Its The COUNTAX function counts non-blank results when evaluating the result of an expression over a table.
     That is, it works just like the COUNTA function, but is used to iterate through the rows in a table and count rows
      where the specified expressions results in a non-blank result.

      Syntax:- COUNTAX(Table,Expressions)

      eg. COUNTAX = COUNTAX(FILTER(Table1,[StockQty]>100),Table1[ProductName])

      *DISTINCTCOUNT() is function which show distinct values from Columns.
      Its Counts the number of distinct values in a column.

      Syntax: - DISTINCTCOUNT(Column)

      *DISTINCTCOUNT with Expression
      Its function to filter value from Table

      eg. DISTINCTCOUNTwEXP = COUNTROWS(DISTINCT(Table1[StockLocation]))


      *COUNTBLANK is function which count blank rows.
      Its Counts the number of blank cells in a column.

      Syntax:- COUNTBLANK(column)

      eg. COUNTBLANK = COUNTBLANK(Table1[StockLocation])

      *COUNTROWS() is function to calculate rows in table.
      Its The COUNTROWS function counts the number of rows in the specified table, or in a table defined by an expression.

      Syntax: - COUNTROWS([<table>])

      eg. COUNTROWS = COUNTROWS(Table1)

      *COUNTROWS with Expressions function is use to modify the table before performing count operation on table.

      Syntax: - COUNTROWS([<table>])

      eg. COUNTROWSwEXP = COUNTROWS(FILTER(Table1,Table1[StockLocation]="EMEA")).

      Note:- COUNTROWS function does not support columns.


    #2
      *CALCULATE() its a function that uses to calculate different expression with filters.
      Its Evaluates an expression in a modified filter context.

      Syntax:- CALCULATE(<expression>[, <filter1> [, <filter2> [, …]]])

      eg. CAL TotSales = CALCULATE([SUM TotSales])


      *FILTER() is a function which filter the table with condition

      Note:- FILTER in calculate work as only value which is required but when new filter are add it start giving important to new filter.

      eg. CAL w FILTER TotSales = CALCULATE([SUM TotSales],Products[ProductName]="Queso Cabrales")

      Real life example to use calculate function is when to calculate percentage of sales of overall sales.


30-11-2023

    #1
      FILTER()
      Its Returns a table that represents a subset of another table or expression.

      Syntax:- FILTER(<table>,<filter>)

      eg.FILTER(ProductData,ProductData[ProductCategory]="Mountain Bikes")


    #2
      All() ALLEXCEPT()

      *ALL()
      Its Returns all the rows in a table, or all the values in a column, ignoring any filters that might have been applied.
       This function is useful for clearing filters and creating calculations on all the rows in a table.

       Syntax:- ALL( [<table> | <column>[, <column>[, <column>[,…]]]] )

       eg. ALL(Order_Details,Categories[CategoryID])

       *ALLEXCEPT()
       Its Removes all context filters in the table except filters that have been applied to the specified columns.
       Its Returns a table with all filters removed except for the filters on the specified columns.

       Syntax:- ALLEXCEPT(<table>,<column>[,<column>[,…]])

       eg. ALLEXCEPT(Order_Details,Categories[CategoryID],Categories[CategoryName])

      #3
        CALCULATE(FILTER())
          Filter is used in calculate to filter the table first then perform calculate operation(Measure)

          eg. CALwFilter = CALCULATE([SUM of Total Sales],FILTER(FilterProductTable,FilterProductTable[ProductName]="Queso Cabrales"))

          Note:- Calculate function would give error when filter table has measures it would only take column with condition of Number and Text.

        CALCULATE(FILTER(ALL()))
          ALL in calculate() would select all column from table in the filter table then calculate would work. It same as calculate with condition.

          eg. CALwFilterwALL = CALCULATE([SUM of Total Sales],FILTER(ALL(FilterProductTable),FilterProductTable[ProductName]="Queso Cabrales"))

        Note:- multiple expression with ||
          eg. CALwFilter = CALCULATE([SUM of Total Sales],FILTER(FilterProductTable,FilterProductTable[ProductName]="Queso Cabrales"
          || FilterProductTable[ProductName]="Gorgonzbla Telino"))

      #4
        SUM() vs SUMX() vs CALCULATE()

        If you ask 12 year boy to calculate total apples if there are 5 apples on each tree and there are 10 trees.Boy would do 5*10=50 that is SUM(no.apple).
        If that same question to 5 year girl she would calculate like 5+5+5+5......=50 that is SUMX(Garden,Garden[no.apple]*[no.tree])+0.
        And if you have created a measure for no.apple and don't want to disturb the structure of table and add more condition like apple_color is Green and etc thatis CALCULATE([no of apples],FILTER(Garden,Garden[apple_color]="Green"))


    01-12-2023
      # Download A Dataset and Load in power BI
      # Done with Modeling and Transform.
      # Create New table for Data with Calendar and CALANDERAUTO

     02-12-2023
      # Use Dax for Total Sales and Total QTY with Sum and SUMX.
      # Found the difference between SUMX and CALCULATE
      # Use COUNTAX and COUNT To show Total product.
      # Use Filter function ALL and ALLEXCEPT with example.

05-12-2023
  Today I have started new function that is RANKX()

  #1
    RANKX()
    It Returns the ranking of a number in a list of numbers for each row in the table argument.


    Syntax:- RANKX(<table>, <expression>[, <value>[, <order>[, <ties>]]])

    eg:- CategoryRank1 = RANKX(ALL(Categories),[Total Sales],,DESC)

    ALLSELECTED()
    It Removes context filters from columns and rows in the current query, while retaining all other context filters or explicit filters.
    The ALLSELECTED function gets the context that represents all rows and columns in the query,
    while keeping explicit filters and contexts other than row and column filters.
    This function can be used to obtain visual totals in queries.

    Syntax:- ALLSELECTED([<tableName> | <columnName>[, <columnName>[, <columnName>[,…]]]] )

    eg. wNoBlankSelectedCategoryRank1 = IF(NOT(ISBLANK([Total Sales])),RANKX(ALLSELECTED(Categories),[Total Sales],,0),BLANK())

  #2
    RANKX() with TOPN Slicer
      First we created slicer with a table of TOPN.
      Than we use IF function to get HASONEVALUE() from slicer value.
      Than we compare HASONEVALUE() with RANK functions and gives AVG value.

      eg. MachineAvgRank = RANKX(All(data[Operator]),[Avg Value],,DESC)
          SelectedRank = IF(HASONEVALUE('TopN'[TopName]), VALUES('TopN'[TopN]),BLANK())
          AvgMeasurentValue = IF([MachineAvgRank]<=[SelectedRank],[Avg Value])

      We can click on slicer and as per button we get values on table.

      IF()
        Checks a condition, and returns one value when it's TRUE, otherwise it returns a second value.

        Syntax:- IF(<logical_test>, <value_if_true>[, <value_if_false>])

        eg.   SelectedRank = IF(HASONEVALUE('TopN'[TopName]), VALUES('TopN'[TopN]),BLANK())

        Return Either value_if_true, value_if_false, or BLANK.


        #3
        How to create Variable in  DAX.
        We can use variable to store value or a DAX.

        Syntax:- Var <VariableName> =
                  Expression

                  Return
                  name

        eg. Var Total_sales_India =
                SUMX([Total Sales],Filter(Data['Country']='India'))
            Var Total_sales_Australia =
                        SUMX([Total Sales],Filter(Data['Country']='Australia'))

            Return

            IF(HASONEVALUE(Data[Country]),
                IF VALUES(Data[Country]) = "Australia",
                    Total_sales_Australia,
                    Total_sales_India
                    ),
                BLANK()
                )


7/12/2023

        #1 Distinct Sum

        It can be achieve by 2 measure :

        Max_tooling_value = MAX(Table1[Budget Cost Tool])
        Corrent Distinct SUM = SUMX(DISTINCT(Table1[PartDenom]),Max_tooling value)

        We need to first create measure to calculate max value from column then use that measure to SUMX() Distinct Product.


9/12/2023
        I started with DAX 25 Days Challenge with curbal

        # It had its own modified various of North Wind Dataset.The format was Each day one question.
        The first question was from Product table with Count of current product with less than 20 $ value.

        Dax:- Productless20 = CALCULATE(COUNT(Products[ProductID]),FILTER(Products,Products[Unit Price]<20))

        My DAX was for Product value less than 20 but I forget the tricky part which was current.To know about that I should have gone through North Wind Dataset.
        The Dataset has a column Discontinued which has boolen value.

        Corrent DAX:- Productless20 = CALCULATE(COUNT(Products[ProductID]),FILTER(Products,Products[Unit Price]<20),Products[Discontinued]=FALSE())

        # Day 2 Challenge was Most Expensive product.

        DAX:- MostExpensiveProduct = CALCULATE(DISTINCT(Products[ProductName]),FILTER(Products,Products[UnitPrice]=MAX(Products[UnitPrice])))

        My DAX was also right but Curbal gave one more solution.

        DAX:- Day 2 = CALCULATE(SELECTEDVALUE(Products[ProductName]),TOPN(1,Products,Products[UnitPrice],DESC))

        Got to know about 2 function SELECTEDVALUE() and TOPN()

        #1 SELECTEDVALUE()
        Returns the value when the context for columnName has been filtered down to one distinct value only. Otherwise returns alternateResult.

        Syntax:- SELECTEDVALUE(<columnName>[, <alternateResult>])

        Eg. SELECTEDVALUE(Product[ProductName],MAX(Product[UnitPrice]))

        #2 TOPN()
        Returns the top N rows of the specified table.

        If you have use Python Pandas than pd.head() will return same values.

        Syntax: - TOPN(<N_Value>, <Table>, <OrderBy_Expression>, [<Order>[, <OrderBy_Expression>, [<Order>]]…])

        eg. TOPN(1,Products,Products[UnitPrice],DESC) --In new Table


11/12/2023

        Completed till DAY 5 DAX Challenge.

        The Challenge was based on DAX friday learning.
        with function like CALACULATE(),COUNTAX() and var.


12/12/2023
        #1 SUMMARIZE()
        Returns a summary table for the requested totals over a set of groups.

        Syntax:- SUMMARIZE (<table>, <groupBy_columnName>[, <groupBy_columnName>]…[, <name>, <expression>]…)

        A table with the selected columns for the groupBy_columnName arguments and the summarized columns designed by the name arguments.

        eg. SUMMARIZE(Orders,Orders[OrderID],"ProdCount",COUNTA(Orders[ProductID])

        I learn this function while solving DAX challenge DAY 6

        To perform DAY 6 use AVERAGEX() with SUMMARIZE() To get group BY by order ID of Product ID Count

        TO perform DAY 7 CALCULATE() with FILTER() and ISBLANK()

        #2 HASONEVALUE()
        Returns TRUE when the context for columnName has been filtered down to one distinct value only. Otherwise is FALSE.

        Syntax:- HASONEVALUE(<columnName>)

        eg.HASONEVALUE(Orders[OrderID])

        #3 VALUES()
        When the input parameter is a column name, returns a one-column table that contains the distinct values from the specified column.
        Duplicate values are removed and only unique values are returned. A BLANK value can be added.
        When the input parameter is a table name, returns the rows from the specified table. Duplicate rows are preserved. A BLANK row can be added.

        Syntax:- VALUES(<TableNameOrColumnName>)

        When the input parameter is a column name, a single column table. When the input parameter is a table name,
        a table of the same columns is returned.

        eg. VALUES(Orders[OrderID]

        To perform DAY 8 curbal has 2 method
        - use VAR to create count of productID and than calculate order id with filter of var = 1 then Create another measure with
        IF(), HASONEVALUE(),SUMX() and VALUE()
        - use COUNTROWS() with SUMMARIZE() and FILTER().
